<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hannibal Ad Portas</title>
    <link>https://hannibaladportas.dev/</link>
    <description>Recent content on Hannibal Ad Portas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hannibaladportas.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Custom Prompt on Remote Servers</title>
      <link>https://hannibaladportas.dev/posts/ssh-prompt/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hannibaladportas.dev/posts/ssh-prompt/</guid>
      <description>&lt;h1 id=&#34;the-insanity&#34;&gt;The Insanity&lt;/h1&gt;
&lt;p&gt;In my job I have to ssh into a lot of servers to do preventive and routine maintenance.
These servers tend to have a patch work of settings and configurations.
During a shift I can touch Redhat, AIX, and HP-UX servers.
These servers do not have a consistent prompt.
Some show &lt;code&gt;user@hostname $&lt;/code&gt;, others just display &lt;code&gt;bash-#.#.#&lt;/code&gt;, and several are just a lonely &lt;code&gt;$&lt;/code&gt; devoid of any context to keep you from bricking the server or deleting HIPPA records.&lt;/p&gt;
&lt;p&gt;To make matters worse each of these servers use a different default shell.
The Redhat boxes run bash, AIX uses ksh by default, and the HP-UX servers have a strictly POSIX compliant version of ksh.
Usually when presented with systems using different defaults I&amp;rsquo;d let them be and try and learn in case it came in handy latter, but IBM&amp;rsquo;s version of ksh does not have tab completion.&lt;/p&gt;
&lt;p&gt;Let me repeat that.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In k-shell tab completion does not exist&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To get completion in ksh you either have to mess arround with settings or use the default keybinding ESC+\ &lt;em&gt;shudder&lt;/em&gt;.
So say good bye to all that muscle memory when you&amp;rsquo;re cding into a directory or typing out a long file name; because, in IBM that muscle memory gets you a tab.
Oh and backspace doesn&amp;rsquo;t work on HP-UX, so have fun fixing that tab you just inserted by accident.&lt;/p&gt;
&lt;p&gt;I could of course learn to live with the quirks of ksh and get into the habit of checking your assumptions on unfamiliar servers, but this is IT where the creatively lazy rule.&lt;/p&gt;
&lt;h1 id=&#34;automation-&#34;&gt;Automation !!!&lt;/h1&gt;
&lt;p&gt;Turns out ssh is useful for more than just opining interactive sessions on remote servers.
Secure Shell can run any simgle command, or a combination of commands on a remote host and return their output into your stdout.
You can also take some enviroment varables along with you when you ssh into another host.
To keep myself same I created a bash function to be a wrapper for ssh.
The function gather&amp;rsquo;s facts about the remote server you are trying to access, and then launches you into an remote interactive session with some appropriate environment variables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;# gather facts about the remote host&lt;/span&gt;
	local remoteFacts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;command ssh -t username@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bash --version | head -n1 ; uname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;# if remoteFacts does not contain not (ie the server has bash) launch an interactive bash session with these env varables&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; ! remoteFacts ~&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;not&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
		command ssh -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username@&amp;#34;&lt;/span&gt;$@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;export PS1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;set your prompt string here&amp;#39;&lt;/span&gt; ; bash -i&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	# if the serrver does not have bash
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	elfi [[ remoteFacts ~= &amp;#39;aix&amp;#39; ]]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	then
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;		# Same thing but with AIX settings
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	elif [[ remoteFacts ~= &amp;#39;HP-Uz&amp;#39; ]]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	then
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;		# Same thing but with HP-UX settings
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	else 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;		# default incase no other logic is correct
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	fi
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This simple wrapper lets me use bash when available, set up a useful prompt string, and fix the various quirks of ksh when it&amp;rsquo;s unavoidable.&lt;/p&gt;
&lt;h1 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h1&gt;
&lt;p&gt;Tom Ryder has two excellent posts on &lt;a href=&#34;https://sanctum.geek.nz/arabesque/custom-commands/&#34;&gt;custom commands&lt;/a&gt; on Unix and your &lt;a href=&#34;https://sanctum.geek.nz/arabesque/bash-prompts/&#34;&gt;prompt string&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Surf(ing) on Wayland</title>
      <link>https://hannibaladportas.dev/posts/surfing-on-wayland/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hannibaladportas.dev/posts/surfing-on-wayland/</guid>
      <description>&lt;h1 id=&#34;surf&#34;&gt;Surf&lt;/h1&gt;
&lt;p&gt;Surf is a strange web browser.
In a world where web browsers come default with the ability to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sync your settings across devices&lt;/li&gt;
&lt;li&gt;manage your passwords&lt;/li&gt;
&lt;li&gt;block ads&lt;/li&gt;
&lt;li&gt;remember your history&lt;/li&gt;
&lt;li&gt;manage bookmarks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Surf&amp;rsquo;s feature list is incredibly sparse.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is able to display websites and follow links.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s it. No history, no bookmarks, no search bar, no &lt;em&gt;&lt;strong&gt;tabs!&lt;/strong&gt;&lt;/em&gt;
None of the features that modern web browsers insist on including.
So of course I&amp;rsquo;m installing and using it.&lt;/p&gt;
&lt;h1 id=&#34;issues-running-on-wayland&#34;&gt;Issues Running on Wayland&lt;/h1&gt;
&lt;p&gt;The simplicity of Surf extends to the install process, and documentation.
To install you can either check to see if you package manager of choice included surf in its software repository, or you can clone the git repo and build it yourself.&lt;/p&gt;
&lt;p&gt;If when you run surf you get the error: &lt;code&gt;dk-WARNING **: 10:38:27.309: ../gtk/gdk/x11/gdkwindow-x11.c:5633 drawable is not a native X11 window&lt;/code&gt; it&amp;rsquo;s because you are running a Wayland session, not an X server.&lt;/p&gt;
&lt;p&gt;The quick fix for this is to define the environment variable &lt;code&gt;GDK_BACKEND=x11&lt;/code&gt;, but that will affect all programs that care about the gdk backend, even the ones who play better under Wayland.
I fixed this by creating the following script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#! /usr/bin/env bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is a wrapper for surf&lt;/span&gt;

GDK_BACKEND&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x11 /usr/bin/surf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;named it surf, and placed it before the real surf in my &lt;code&gt;$PATH&lt;/code&gt;.
Now when I run surf from a terminal or my launcher it calls my script, passes all the arguments, and sets the correct gdk backend value.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You can download surf from the suckless website &lt;a href=&#34;https://surf.suckless.org&#34;&gt;surf.suckless.org&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up Zowe on Linux</title>
      <link>https://hannibaladportas.dev/posts/setting-up-zowe-on-linux/</link>
      <pubDate>Mon, 20 Apr 2020 21:20:53 -0500</pubDate>
      
      <guid>https://hannibaladportas.dev/posts/setting-up-zowe-on-linux/</guid>
      <description>&lt;p&gt;I have been interested in learning COBOl and mainframes for a couple of months now, but I&amp;rsquo;ve been stymied by the difficulty of setting up a good mainframe emulator.
The Hercules mainframe emulator has a lot of conflicting install instructions (&lt;a href=&#34;http://www.hercules-390.org/&#34;&gt;and the top search result was last updated in 2010&lt;/a&gt;);
so I was excited when the global pandemic highlighted the need for engineers who understood these systems.
In the past month IBM has started the &lt;a href=&#34;https://www.openmainframeproject.org/&#34;&gt;Open Mainframe Project&lt;/a&gt; with the intent of filling the skills gap for mainframes.
As part of the Open Mainframe project IBM has released &lt;a href=&#34;https://github.com/openmainframeproject/cobol-programming-course&#34;&gt;cobol programming course&lt;/a&gt;, along with &amp;ldquo;COBOL Programming with VSCode&amp;rdquo; labs.
Once registered in this course you get access to a real life big iron mainframe so you don&amp;rsquo;t have to worry about mucking around with emulators.&lt;/p&gt;
&lt;p&gt;There is just one catch.
As the name implies the course uses VSCode relying on the Zowe Explorer plugin to grant you access to the mainframe.
If VSCode is not your preferred editor and you want to take the course, you&amp;rsquo;re out of luck.
Or are you? The plugin is based on the Zowe project which has also created &lt;a href=&#34;https://github.com/zowe/zowe-cli&#34;&gt;zowe-cli&lt;/a&gt;.
Using zowe-cli you should be able to perform all the labs using your preferred terminal and editor of choice.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how to get it running on Arch Linux. If your roll with a different distro the steps should be similar.&lt;/p&gt;
&lt;h2 id=&#34;installing-zowe&#34;&gt;Installing Zowe&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;install npm you can use your distro&amp;rsquo;s package manager of choice&lt;/li&gt;
&lt;li&gt;install zowe though npm&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm install @zowe/cli@zowe-v1-lts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On my system zowe was installed to &lt;code&gt;$HOME/.node_modules/bin/&lt;/code&gt;, so I added that folder to my PATH variable. That way I don&amp;rsquo;t need to type in the path to zowe every time I want to run a command.&lt;/p&gt;
&lt;h2 id=&#34;register-a-profile&#34;&gt;Register a Profile&lt;/h2&gt;
&lt;p&gt;Once you&amp;rsquo;ve registered for the IBM class IBM will sent you an email containing login information, and a warning that you&amp;rsquo;re account will lock if not activated within 14 days.
Strangely the email has 3 IP address, and no instructions on how to activate your account.
The pdf distributed with the course also does not describe how to activate your account, in VSCode or otherwise.&lt;/p&gt;
&lt;p&gt;To activate your account though the command line you can create a profile on your system that zowe can reference as default.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;zowe profiles create zosmf-profile zoweCLI --host https://IP.ADDRESS --port &lt;span style=&#34;color:#ae81ff&#34;&gt;000&lt;/span&gt; --user username --pass password --reject-unauthorized false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Replace the IP address, user name and password with the ones provided in the email from IBM.&lt;/p&gt;
&lt;p&gt;Now you can test your connection to the mainframe using your profile with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;zowe zosmf check status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alright now it&amp;rsquo;s time to party like it&amp;rsquo;s 1959.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.zowe.org/stable/user-guide/cli-configuringcli.html#testing-zowe-cli-connection-to-z-osmf&#34;&gt;https://docs.zowe.org/stable/user-guide/cli-configuringcli.html#testing-zowe-cli-connection-to-z-osmf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hannibaladportas.dev/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hannibaladportas.dev/about/</guid>
      <description>&lt;h1 id=&#34;about&#34;&gt;About&lt;/h1&gt;
&lt;p&gt;I am a classically trained computer scientist working as a &amp;lsquo;Monitoring System&amp;rsquo;s Analysts&amp;rsquo; at Cigna.
What that means is that I am &amp;lsquo;eyes on glass&amp;rsquo; watching the companies monitors, and when something goes wrong I assess the impact, help coordinate teams, and sometimes implement the fix.
Due to a recent database error my official title in Skype is &amp;lsquo;Time and Materials&amp;rsquo; which sounds so ridiculous. I need to put it on a business card.&lt;/p&gt;
&lt;p&gt;This website is mostly going to be a collection of things I&amp;rsquo;ve found usefull and would forget if I never wrote down.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
